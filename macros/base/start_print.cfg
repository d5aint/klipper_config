[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_check_gates: 0
variable_tools_used: ""
variable_sync_mmu_extruder: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
variable_bed_mesh_profile: ""
variable_total_layer: 0
variable_filter_enabled: 0
gcode:
    # Get default parameters then overwrite with parameters passed from slicer
    {% set MATERIAL = params.MATERIAL|string %}
    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}
	
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(material.bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(material.extruder_temp)|float %}
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}
    {% set SOAK = params.SOAK|default(material.soak)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(material.chamber_temp)|int %}
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(material.chamber_max_heating_time)|int %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    {% set CHECK_GATES = params.CHECK_GATES|default(printer['gcode_macro _USER_VARIABLES'].mmu_check_gates_on_start_print)|int %}
    {% set TOOLS_USED = params.TOOLS_USED|default("")|string %}
    {% set SYNC_MMU_EXTRUDER = params.SYNC_MMU_EXTRUDER|default(0)|int %}
    {% set BED_MESH_PROFILE = params.MESH|default("")|string %}
	
    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}
	
    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set mmu_enabled = printer["gcode_macro _USER_VARIABLES"].mmu_enabled %}
    {% set mmu_force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].mmu_force_homing_in_start_print %}
    {% set filter_enabled = material.filter_enable %}
    
    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=z_adjust VALUE={Z_ADJUST}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=check_gates VALUE={CHECK_GATES}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=tools_used VALUE='"{TOOLS_USED}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=sync_mmu_extruder VALUE={SYNC_MMU_EXTRUDER}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_mesh_profile VALUE='"{BED_MESH_PROFILE}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filter_enabled VALUE={filter_enabled}
    
    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    STATUS_LEDS COLOR="BUSY"
    LIGHT_ON S={light_intensity_start_print}
    
    CLEAR_PAUSE
    BED_MESH_CLEAR
	
    # If a filter is enabled and already running due to a print that just finished
    {% if filter_enabled %}
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
        STOP_FILTER
    {% endif %}
	
    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83
    
    # Material parameters
    SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}
    
    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}
    
    {% if mmu_enabled %}
	    _MMU_INIT
    {% endif %}
    
    

    
    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order
    _MODULE_HEATSOAK_BED
    _MODULE_HEATSOAK_CHAMBER
	_MODULE_EXTRUDER_PREHEATING
    _MODULE_TILTING
	_MODULE_Z_CALIB
    _MODULE_BED_MESH
    _MODULE_EXTRUDER_HEATING
    _MODULE_PURGE
    _MODULE_CLEAN
    _MODULE_PRIMELINE
    
    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material from the slicer, etc...
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1
    
    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}
    
    STATUS_LEDS COLOR="PRINTING"
    LIGHT_ON S={light_intensity_printing}
	
	{% if mmu_enabled %}
        {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_START
        {% endif %}
    {% endif %}
	
    {% if verbose %}
        RESPOND MSG="Start printing!"
    {% endif %}
    
    G92 E0.0

[gcode_macro _MODULE_PRIMELINE]
gcode:
    PRIMELINE

[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set SOAK = printer["gcode_macro START_PRINT"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
	
    {% set filter_enabled = printer["gcode_macro START_PRINT"].filter_enabled %}
	
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
	
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    
    STATUS_LEDS COLOR="HEATING"
    
    {% if printer.heater_bed.temperature < (BED_TEMP - 8) %}
        # Look if a specific chamber temperature is needed and power on the recirculating filter to spread the heat
        {% if (CHAMBER_TEMP > 0) and filter_enabled %}
            START_FILTER SPEED=1
        {% endif %}
		
        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
        {% if SOAK > 0 %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
        {% endif %}
		
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}

[gcode_macro _MODULE_HEATSOAK_CHAMBER]
gcode:
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}
    {% set filter_enabled = printer["gcode_macro START_PRINT"].filter_enabled %}
	
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    
    {% if CHAMBER_TEMP > 0 %}
        {% set CURRENT_TEMP = printer["temperature_sensor chamber"].temperature|float %}
		
        {% if CURRENT_TEMP <= CHAMBER_TEMP %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
            START_FILTER SPEED=1
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}
			
            # Reset the filter status now that the chamber is at correct temperature
            {% if filter_enabled %}
			    STOP_FILTER
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro _MODULE_TILTING]
gcode:
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    _TILT_CALIBRATE FORCE={force_homing_in_start_print}

[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set mmu_enabled = printer["gcode_macro _USER_VARIABLES"].mmu_enabled %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    
    STATUS_LEDS COLOR="HEATING"
    
    {% if verbose %}
        RESPOND MSG="Extruder heating to print temperature..."
    {% endif %}
    _CONDITIONAL_MOVE_TO_PURGE_BUCKET
    M109 S{EXTRUDER_TEMP}
	
    {% if mmu_enabled %}
        _MMU_LOAD_INITIAL_TOOL
    {% endif %}
	
    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}

[gcode_macro _MODULE_PURGE]
gcode:
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    
    PURGE TEMP={EXTRUDER_TEMP}

[gcode_macro _MODULE_CLEAN]
gcode:
    CLEAN_NOZZLE

[gcode_macro _MODULE_Z_CALIB]
gcode:
    G28 Z

[gcode_macro _MODULE_BED_MESH]
gcode:
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}
    {% set BED_MESH_PROFILE = printer["gcode_macro START_PRINT"].bed_mesh_profile %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    
    STATUS_LEDS COLOR="MESHING"
    
    {% if BED_MESH_PROFILE == "" %}
        {% if verbose %}
            RESPOND MSG="Bed mesh measurement..."
		{% endif %}
		
        ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    {% else %}
        {% if verbose %}
            RESPOND MSG="Load bed mesh profile : {BED_MESH_PROFILE}"
        {% endif %}
        BED_MESH_PROFILE LOAD={BED_MESH_PROFILE}
    {% endif %}

[gcode_macro _MODULE_EXTRUDER_PREHEATING]
gcode:
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    
    STATUS_LEDS COLOR="HEATING"
	
    {% if verbose %}
        RESPOND MSG="Pre-heating the nozzle to a safe temperature..."
    {% endif %}
	
    M109 S{safe_extruder_temp}
	
    {% if verbose %}
        RESPOND MSG="Extruder at safe temperature of {safe_extruder_temp} degrees"
    {% endif %}
