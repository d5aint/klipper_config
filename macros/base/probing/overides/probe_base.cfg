#############################################################################
# Dockable probe macros highly inspired from https://github.com/jlas1/Klicky-Probe
# Reworked by Elpopo and myself to simplify it while trying to stay generic
#############################################################################

[gcode_macro PROBE_CALIBRATE]
rename_existing: _BASE_PROBE_CALIBRATE
description: Calibrate the probe z_offset with klicky automount
gcode:
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed %}
    {% set max_x = printer["gcode_macro _USER_VARIABLES"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _USER_VARIABLES"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check variables max bed size!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < probe_min_z_travel) %}
        G0 Z{probe_min_z_travel} F{z_drop_speed}
    {% endif %}

    M400 #mandatory if we want to save right position
    _ENTRY_POINT FUNCTION=PROBE_CALIBRATE

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={travel_speed}

    _BASE_PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
    
    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={travel_speed}


[gcode_macro PROBE_ACCURACY]
rename_existing: _BASE_PROBE_ACCURACY
description: Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed %}
    {% set max_x = printer["gcode_macro _USER_VARIABLES"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _USER_VARIABLES"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check variables max bed size!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < probe_min_z_travel) %}
        G0 Z{probe_min_z_travel} F{z_drop_speed}
    {% endif %}

    M400 #mandatory if we want to save right position
    _ENTRY_POINT FUNCTION=PROBE_ACCURACY

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={travel_speed}

    _BASE_PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={travel_speed}


# Next is used if there is QGL/Z_TILT or BED_MESH currently being measured with an
# error to be able to dock the probe before stopping everything on the machine
[gcode_macro _PROBE_ON_ERROR_ACTION]
variable_probing: False
gcode:
    {% set autodock_on_probe_error = printer["gcode_macro _USER_VARIABLES"].autodock_on_probe_error %}
    {% set probing = printer["gcode_macro _PROBE_ON_ERROR_ACTION"].probing %}

    {% if autodock_on_probe_error and probing %}
        DOCK_PROBE_UNLOCK
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_PROBE_ON_ERROR_ACTION VARIABLE=probing VALUE=False
