[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BASE_BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if verbose %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}
    _CG28
    
    ACTIVATE_PROBE
    BED_MESH_CLEAR
    
	{% if verbose %}
        { action_respond_info("Generating bed mesh") }
    {% endif %}
    _BASE_BED_MESH_CALIBRATE  {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    
    DEACTIVATE_PROBE

[gcode_macro _TILT_CALIBRATE]
description: Do a QGL
gcode:
    {% set FORCE_OPERATION = params.FORCE|default(true) %}
    
    STATUS_LEDS COLOR="LEVELING"
    
    {% if printer.quad_gantry_level.applied|lower == 'false' or FORCE_OPERATION %}
        {% if verbose %}
            RESPOND MSG="Performing QGL..."
        {% endif %}
		
        QUAD_GANTRY_LEVEL
    {% endif %}
    
    STATUS_LEDS COLOR="READY"

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _BASE_QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set tilting_travel_accel = printer["gcode_macro _USER_VARIABLES"].tilting_travel_accel %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    
    {% if verbose %}
        { action_respond_info("Quad gantry leveling") }
    {% endif %}
    _CG28
    
    ACTIVATE_PROBE
    
    # Set the tilting acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    {% set saved_decel = printer.toolhead.max_accel_to_decel %}
    M204 S{tilting_travel_accel}
    
    _BASE_QUAD_GANTRY_LEVEL {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    
    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}
    
    DEACTIVATE_PROBE
