###########################################################################
# Klicky-probe macros from https://github.com/jlas1/Klicky-Probe
# Heavily modified here by myself to be simpler and adapted to my machine
###########################################################################

[gcode_macro _PROBE_VARIABLES]
variable_probe_attached: False
variable_probe_state: False
variable_probe_lock: False
variable_z_endstop_x: 0
variable_z_endstop_y: 0
gcode:

[gcode_macro _EXIT_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed  = params.MOVE_SPEED|default(0) %}
    M400 # mandatory to save the new safe position
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _ENTRY_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90

[gcode_macro _HOMING_VARIABLES]
gcode:
    {% set R  = params.RESET|default(0)  %}
    {% if R %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    {% endif %}


[gcode_macro ATTACH_PROBE_LOCK]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    ATTACH_PROBE
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }

[gcode_macro DOCK_PROBE_UNLOCK]
description: Docks Klicky Probe even if it was locked
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    DOCK_PROBE

[gcode_macro PROBE_UNLOCK]
description: Unlocks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }

[gcode_macro PROBE_LOCK]
description: Locks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }


[gcode_macro ATTACH_PROBE]
description: Attaches Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro _USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro _USER_VARIABLES"].docklocation_y %}
    {% set Da = printer["gcode_macro _USER_VARIABLES"].dockarmslenght|default(0) %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _USER_VARIABLES"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sd = printer["gcode_macro _USER_VARIABLES"].klicky_dock_speed * 60 %}
    {% set Sr = printer["gcode_macro _USER_VARIABLES"].klicky_release_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _ENTRY_POINT FUNCTION=ATTACH_PROBE

    # if x and y are not homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        
        # Move to safe Z
        {% if (printer.toolhead.position.z < Hzh) %}
            {% if V %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{Hzh} F{Sz}
        {% endif %}

        # Probe entry location
        G0 X{Dx} Y{Dy|int - Da|int} F{St}
        # Pickup from Probe location
        G0 X{Dx} Y{Dy} F{Sd}
        # Get the probe out of the dock
        G0 X{Dx} Y{Dy|int - Da|int} F{Sr}

        _CHECK_PROBE action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=ATTACH_PROBE


[gcode_macro DOCK_PROBE]
description: Docks Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro _USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro _USER_VARIABLES"].docklocation_y %}
    {% set Da = printer["gcode_macro _USER_VARIABLES"].dockarmslenght|default(0) %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _USER_VARIABLES"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sd = printer["gcode_macro _USER_VARIABLES"].klicky_dock_speed * 60 %}
    {% set Sr = printer["gcode_macro _USER_VARIABLES"].klicky_release_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _ENTRY_POINT FUNCTION=DOCK_PROBE

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}

        # Move to safe Z
        {% if (printer.toolhead.position.z < Hzh) %}
            {% if V %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{Hzh} F{Sz}
        {% endif %}

        # Probe entry location
        G0 X{Dx} Y{Dy|int - Da|int} F{St}
        # Drop Probe to Probe location
        G0 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        {% if ((Dx|int - 50) < 0) %}
            G0 X{Dx|int + 50} Y{Dy} F{Sr}
		{% else %}
		    G0 X{Dx|int - 50} Y{Dy} F{Sr}
		{% endif %}

        G4 P500
        _CHECK_PROBE action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=DOCK_PROBE


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
gcode:
    Query_Probe
    _SET_PROBE_STATE action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SET_PROBE_STATE]
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
