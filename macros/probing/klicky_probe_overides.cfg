###########################################################################
# Klicky-probe macros from https://github.com/jlas1/Klicky-Probe
# Heavily modified here by myself to be simpler and adapted to my machine
###########################################################################

[gcode_macro PROBE_CALIBRATE]
rename_existing: _BASE_PROBE_CALIBRATE
description: Calibrate the probe z_offset with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < Hzh) %}
        G0 Z{Hzh} F{Sz}
    {% endif %}

    STATUS_BUSY
    _ENTRY_POINT FUNCTION=PROBE_CALIBRATE

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={St}

    _BASE_PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
    
    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_CALIBRATE MOVE=1 MOVE_SPEED={St}
    STATUS_READY


[gcode_macro PROBE_ACCURACY]
rename_existing: _BASE_PROBE_ACCURACY
description: Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }
    {% endif %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < Hzh) %}
        G0 Z{Hzh} F{Sz}
    {% endif %}

    STATUS_BUSY
    _ENTRY_POINT FUNCTION=PROBE_ACCURACY

    _CHECK_PROBE action=query
    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={St}

    _BASE_PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE

    # Restore nozzle location again at the end
    _EXIT_POINT FUNCTION=PROBE_ACCURACY MOVE=1 MOVE_SPEED={St}
    STATUS_READY


[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _BASE_QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("Quad gantry leveling") }
    {% endif %}

    STATUS_LEVELING
    _CHECK_PROBE action=query
    ATTACH_PROBE

    _BASE_QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    DOCK_PROBE
    STATUS_READY


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BASE_BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:

    {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    STATUS_MESHING
    _CHECK_PROBE action=query
    ATTACH_PROBE

    _BASE_BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    DOCK_PROBE
    STATUS_READY
