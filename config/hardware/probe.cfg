[probe]
pin: ^PROBE_INPUT
x_offset: 0
y_offset: 0
speed: 8
lift_speed: 12
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.0060
samples_tolerance_retries: 6


[probe]
pin: ^PROBE_INPUT
x_offset: 0
y_offset: 0
speed: 8
lift_speed: 12
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.0060
samples_tolerance_retries: 6


[gcode_macro _USER_VARIABLES]
variable_probe_type_enabled: "vorontap"
gcode:


[gcode_macro ACTIVATE_PROBE]
description: Put the machine in a state being able to probe
variable_temperature: 0
gcode:
    {% set tap_max_probing_temp = printer["gcode_macro _USER_VARIABLES"].tap_max_probing_temp|float %}

    SAVE_GCODE_STATE NAME=BEFORE_TAP_ACTION
    
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}
    
    SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=temperature VALUE={TARGET_TEMP}
    
    {% if TARGET_TEMP > tap_max_probing_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high for TAP probing, lowering to %.1fC' % (TARGET_TEMP, tap_max_probing_temp)) }
        M106 S255 ; 100% the part cooling fan to help the extruder cooling
        M109 S{tap_max_probing_temp}
        M106 S0   ; Stop the part cooling fan
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        # We accept a temperature fluctuation of +3°C as a close-enough value to eliminate PID issues.
        # Current klipper PID algorithm has some difficulties to handle low thermal latency HE.
        {% if ACTUAL_TEMP > tap_max_probing_temp + 3 %}
            { action_respond_info('Extruder temperature %.1fC is still too high for TAP probing, waiting until below %.1fC' % (ACTUAL_TEMP, tap_max_probing_temp)) }
            M106 S255 ; 100% the part cooling fan to help the extruder cooling
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={tap_max_probing_temp}
            M106 S0   ; Stop the part cooling fan
        {% endif %}
    {% endif %}


[gcode_macro DEACTIVATE_PROBE]
description: Revert the machine to a normal state after probing
gcode:
    {% set tap_deactivation_zhop = printer["gcode_macro _USER_VARIABLES"].tap_deactivation_zhop %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    
    # Small Z hop to avoid restoring the temperature directly on the PEI
    {% set z_safe = printer.toolhead.position.z + tap_deactivation_zhop %}
    {% if z_safe > printer.toolhead.axis_maximum.z %}
        {% set z_safe = printer.toolhead.axis_maximum.z %}
    {% endif %}
    G90
    G1 Z{z_safe} F{Sz}
    
    # Then restoring the temperature
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}
    {% set old_target_temperature = printer["gcode_macro ACTIVATE_PROBE"].temperature %}
    
    {% if TARGET_TEMP != old_target_temperature %}
        { action_respond_info('Set extruder temperature target to %.1fC' % old_target_temperature) }
        M109 S{old_target_temperature}
    {% else %}
        # Temperature target is already correct, but nozzle temperature may still be too low.
        # We accept a temperature fluctuation of -3°C as a close-enough to eliminate PID issues.
        {% if ACTUAL_TEMP < old_target_temperature - 3 %}
            { action_respond_info('Extruder temperature %.1fC is still too low, waiting until reached %.1fC' % (ACTUAL_TEMP, old_target_temperature)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={old_target_temperature}
        {% endif %}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=BEFORE_TAP_ACTION
